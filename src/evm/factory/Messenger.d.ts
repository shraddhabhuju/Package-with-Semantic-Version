/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
	BaseContract,
	BigNumber,
	BigNumberish,
	CallOverrides,
	ContractTransaction,
	ethers,
	EventFilter,
	Overrides,
	PayableOverrides,
	PopulatedTransaction,
	Signer,
} from "ethers";

import { EventFragment, FunctionFragment, Result } from "@ethersproject/abi";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";

import type { TypedEvent, TypedEventFilter, TypedListener } from "./common";

interface MessengerInterface extends ethers.utils.Interface {
	functions: {
		"CANCEL_SOL()": FunctionFragment;
		"CANCEL_TOKEN()": FunctionFragment;
		"CHAIN_ID()": FunctionFragment;
		"CONSISTENCY_LEVEL()": FunctionFragment;
		"DEPOSIT_SOL()": FunctionFragment;
		"DEPOSIT_TOKEN()": FunctionFragment;
		"INSTANT_SOL()": FunctionFragment;
		"INSTANT_TOKEN()": FunctionFragment;
		"PAUSE_SOL()": FunctionFragment;
		"PAUSE_TOKEN()": FunctionFragment;
		"SOL_STREAM()": FunctionFragment;
		"SOL_STREAM_UPDATE()": FunctionFragment;
		"SOL_WITHDRAW_STREAM()": FunctionFragment;
		"TOKEN_STREAM()": FunctionFragment;
		"TOKEN_STREAM_UPDATE()": FunctionFragment;
		"TOKEN_WITHDRAW_STREAM()": FunctionFragment;
		"WETH()": FunctionFragment;
		"WITHDRAW_SOL()": FunctionFragment;
		"WITHDRAW_TOKEN()": FunctionFragment;
		"_wormhole_fee()": FunctionFragment;
		"encode_native_stream((uint64,uint64,uint64,uint16,bytes,bytes,uint64,uint64))": FunctionFragment;
		"encode_native_stream_update((uint64,uint64,uint64,uint16,bytes,bytes))": FunctionFragment;
		"encode_native_withdraw_stream((uint16,bytes))": FunctionFragment;
		"encode_process_cancel_native_stream((uint16,bytes))": FunctionFragment;
		"encode_process_cancel_token_stream((uint16,bytes,bytes,bytes,bytes))": FunctionFragment;
		"encode_process_deposit_sol((uint64,uint16,bytes))": FunctionFragment;
		"encode_process_deposit_token((uint64,uint16,bytes,bytes))": FunctionFragment;
		"encode_process_instant_native_transfer((uint64,uint16,bytes,bytes))": FunctionFragment;
		"encode_process_instant_token_transfer((uint64,uint16,bytes,bytes,bytes))": FunctionFragment;
		"encode_process_native_withdrawal((uint64,uint16,bytes))": FunctionFragment;
		"encode_process_pause_native_stream((uint16,bytes))": FunctionFragment;
		"encode_process_pause_token_stream((uint16,bytes,bytes,bytes,bytes))": FunctionFragment;
		"encode_process_token_withdrawal((uint64,uint16,bytes,bytes))": FunctionFragment;
		"encode_token_stream((uint64,uint64,uint64,uint16,bytes,bytes,uint64,uint64,bytes))": FunctionFragment;
		"encode_token_stream_update((uint64,uint64,uint64,uint16,bytes,bytes,bytes,bytes))": FunctionFragment;
		"encode_token_withdraw_stream((uint16,bytes,bytes,bytes,bytes))": FunctionFragment;
		"getCurrentMsg()": FunctionFragment;
		"process_cancel_native_stream(bytes,uint256)": FunctionFragment;
		"process_cancel_token_stream(bytes,bytes,bytes,bytes,uint256)": FunctionFragment;
		"process_deposit_sol(uint64,bytes,uint256)": FunctionFragment;
		"process_deposit_token(uint64,bytes,bytes,uint256)": FunctionFragment;
		"process_instant_native_transfer(uint64,bytes,bytes,uint256)": FunctionFragment;
		"process_instant_token_transfer(uint64,bytes,bytes,bytes,uint256)": FunctionFragment;
		"process_native_stream(uint64,uint64,uint64,bytes,bytes,uint64,uint64,uint256)": FunctionFragment;
		"process_native_stream_update(uint64,uint64,uint64,bytes,bytes,uint256)": FunctionFragment;
		"process_native_withdraw_stream(bytes,uint256)": FunctionFragment;
		"process_native_withdrawal(uint64,bytes,uint256)": FunctionFragment;
		"process_pause_native_stream(bytes,uint256)": FunctionFragment;
		"process_pause_token_stream(bytes,bytes,bytes,bytes,uint256)": FunctionFragment;
		"process_token_stream(uint64,uint64,uint64,bytes,bytes,uint64,uint64,bytes,uint256)": FunctionFragment;
		"process_token_stream_update(uint64,uint64,uint64,bytes,bytes,bytes,bytes,uint256)": FunctionFragment;
		"process_token_withdraw_stream(bytes,bytes,bytes,bytes,uint256)": FunctionFragment;
		"process_token_withdrawal(uint64,bytes,bytes,uint256)": FunctionFragment;
		"receiveEncodedMsg(bytes)": FunctionFragment;
		"registerApplicationContracts(uint16,bytes32)": FunctionFragment;
		"sendMsg(bytes)": FunctionFragment;
		"wormhole()": FunctionFragment;
		"wormhole_fee()": FunctionFragment;
	};

	encodeFunctionData(functionFragment: "CANCEL_SOL", values?: undefined): string;
	encodeFunctionData(functionFragment: "CANCEL_TOKEN", values?: undefined): string;
	encodeFunctionData(functionFragment: "CHAIN_ID", values?: undefined): string;
	encodeFunctionData(functionFragment: "CONSISTENCY_LEVEL", values?: undefined): string;
	encodeFunctionData(functionFragment: "DEPOSIT_SOL", values?: undefined): string;
	encodeFunctionData(functionFragment: "DEPOSIT_TOKEN", values?: undefined): string;
	encodeFunctionData(functionFragment: "INSTANT_SOL", values?: undefined): string;
	encodeFunctionData(functionFragment: "INSTANT_TOKEN", values?: undefined): string;
	encodeFunctionData(functionFragment: "PAUSE_SOL", values?: undefined): string;
	encodeFunctionData(functionFragment: "PAUSE_TOKEN", values?: undefined): string;
	encodeFunctionData(functionFragment: "SOL_STREAM", values?: undefined): string;
	encodeFunctionData(functionFragment: "SOL_STREAM_UPDATE", values?: undefined): string;
	encodeFunctionData(functionFragment: "SOL_WITHDRAW_STREAM", values?: undefined): string;
	encodeFunctionData(functionFragment: "TOKEN_STREAM", values?: undefined): string;
	encodeFunctionData(functionFragment: "TOKEN_STREAM_UPDATE", values?: undefined): string;
	encodeFunctionData(functionFragment: "TOKEN_WITHDRAW_STREAM", values?: undefined): string;
	encodeFunctionData(functionFragment: "WETH", values?: undefined): string;
	encodeFunctionData(functionFragment: "WITHDRAW_SOL", values?: undefined): string;
	encodeFunctionData(functionFragment: "WITHDRAW_TOKEN", values?: undefined): string;
	encodeFunctionData(functionFragment: "_wormhole_fee", values?: undefined): string;
	encodeFunctionData(
		functionFragment: "encode_native_stream",
		values: [
			{
				start_time: BigNumberish;
				end_time: BigNumberish;
				amount: BigNumberish;
				toChain: BigNumberish;
				sender: BytesLike;
				receiver: BytesLike;
				can_cancel: BigNumberish;
				can_update: BigNumberish;
			},
		],
	): string;
	encodeFunctionData(
		functionFragment: "encode_native_stream_update",
		values: [
			{
				start_time: BigNumberish;
				end_time: BigNumberish;
				amount: BigNumberish;
				toChain: BigNumberish;
				sender: BytesLike;
				receiver: BytesLike;
			},
		],
	): string;
	encodeFunctionData(
		functionFragment: "encode_native_withdraw_stream",
		values: [{ toChain: BigNumberish; withdrawer: BytesLike }],
	): string;
	encodeFunctionData(
		functionFragment: "encode_process_cancel_native_stream",
		values: [{ toChain: BigNumberish; sender: BytesLike }],
	): string;
	encodeFunctionData(
		functionFragment: "encode_process_cancel_token_stream",
		values: [
			{
				toChain: BigNumberish;
				sender: BytesLike;
				token_mint: BytesLike;
				reciever_address: BytesLike;
				data_account_address: BytesLike;
			},
		],
	): string;
	encodeFunctionData(
		functionFragment: "encode_process_deposit_sol",
		values: [{ amount: BigNumberish; toChain: BigNumberish; depositor: BytesLike }],
	): string;
	encodeFunctionData(
		functionFragment: "encode_process_deposit_token",
		values: [
			{
				amount: BigNumberish;
				toChain: BigNumberish;
				depositor: BytesLike;
				token_mint: BytesLike;
			},
		],
	): string;
	encodeFunctionData(
		functionFragment: "encode_process_instant_native_transfer",
		values: [
			{
				amount: BigNumberish;
				toChain: BigNumberish;
				withdrawer: BytesLike;
				sender: BytesLike;
			},
		],
	): string;
	encodeFunctionData(
		functionFragment: "encode_process_instant_token_transfer",
		values: [
			{
				amount: BigNumberish;
				toChain: BigNumberish;
				withdrawer: BytesLike;
				token_mint: BytesLike;
				sender: BytesLike;
			},
		],
	): string;
	encodeFunctionData(
		functionFragment: "encode_process_native_withdrawal",
		values: [{ amount: BigNumberish; toChain: BigNumberish; withdrawer: BytesLike }],
	): string;
	encodeFunctionData(
		functionFragment: "encode_process_pause_native_stream",
		values: [{ toChain: BigNumberish; sender: BytesLike }],
	): string;
	encodeFunctionData(
		functionFragment: "encode_process_pause_token_stream",
		values: [
			{
				toChain: BigNumberish;
				sender: BytesLike;
				token_mint: BytesLike;
				reciever_address: BytesLike;
				data_account_address: BytesLike;
			},
		],
	): string;
	encodeFunctionData(
		functionFragment: "encode_process_token_withdrawal",
		values: [
			{
				amount: BigNumberish;
				toChain: BigNumberish;
				withdrawer: BytesLike;
				token_mint: BytesLike;
			},
		],
	): string;
	encodeFunctionData(
		functionFragment: "encode_token_stream",
		values: [
			{
				start_time: BigNumberish;
				end_time: BigNumberish;
				amount: BigNumberish;
				toChain: BigNumberish;
				sender: BytesLike;
				receiver: BytesLike;
				can_cancel: BigNumberish;
				can_update: BigNumberish;
				token_mint: BytesLike;
			},
		],
	): string;
	encodeFunctionData(
		functionFragment: "encode_token_stream_update",
		values: [
			{
				start_time: BigNumberish;
				end_time: BigNumberish;
				amount: BigNumberish;
				toChain: BigNumberish;
				sender: BytesLike;
				receiver: BytesLike;
				token_mint: BytesLike;
				data_account_address: BytesLike;
			},
		],
	): string;
	encodeFunctionData(
		functionFragment: "encode_token_withdraw_stream",
		values: [
			{
				toChain: BigNumberish;
				withdrawer: BytesLike;
				token_mint: BytesLike;
				sender_address: BytesLike;
				data_account_address: BytesLike;
			},
		],
	): string;
	encodeFunctionData(functionFragment: "getCurrentMsg", values?: undefined): string;
	encodeFunctionData(functionFragment: "process_cancel_native_stream", values: [BytesLike, BigNumberish]): string;
	encodeFunctionData(
		functionFragment: "process_cancel_token_stream",
		values: [BytesLike, BytesLike, BytesLike, BytesLike, BigNumberish],
	): string;
	encodeFunctionData(functionFragment: "process_deposit_sol", values: [BigNumberish, BytesLike, BigNumberish]): string;
	encodeFunctionData(
		functionFragment: "process_deposit_token",
		values: [BigNumberish, BytesLike, BytesLike, BigNumberish],
	): string;
	encodeFunctionData(
		functionFragment: "process_instant_native_transfer",
		values: [BigNumberish, BytesLike, BytesLike, BigNumberish],
	): string;
	encodeFunctionData(
		functionFragment: "process_instant_token_transfer",
		values: [BigNumberish, BytesLike, BytesLike, BytesLike, BigNumberish],
	): string;
	encodeFunctionData(
		functionFragment: "process_native_stream",
		values: [BigNumberish, BigNumberish, BigNumberish, BytesLike, BytesLike, BigNumberish, BigNumberish, BigNumberish],
	): string;
	encodeFunctionData(
		functionFragment: "process_native_stream_update",
		values: [BigNumberish, BigNumberish, BigNumberish, BytesLike, BytesLike, BigNumberish],
	): string;
	encodeFunctionData(functionFragment: "process_native_withdraw_stream", values: [BytesLike, BigNumberish]): string;
	encodeFunctionData(
		functionFragment: "process_native_withdrawal",
		values: [BigNumberish, BytesLike, BigNumberish],
	): string;
	encodeFunctionData(functionFragment: "process_pause_native_stream", values: [BytesLike, BigNumberish]): string;
	encodeFunctionData(
		functionFragment: "process_pause_token_stream",
		values: [BytesLike, BytesLike, BytesLike, BytesLike, BigNumberish],
	): string;
	encodeFunctionData(
		functionFragment: "process_token_stream",
		values: [
			BigNumberish,
			BigNumberish,
			BigNumberish,
			BytesLike,
			BytesLike,
			BigNumberish,
			BigNumberish,
			BytesLike,
			BigNumberish,
		],
	): string;
	encodeFunctionData(
		functionFragment: "process_token_stream_update",
		values: [BigNumberish, BigNumberish, BigNumberish, BytesLike, BytesLike, BytesLike, BytesLike, BigNumberish],
	): string;
	encodeFunctionData(
		functionFragment: "process_token_withdraw_stream",
		values: [BytesLike, BytesLike, BytesLike, BytesLike, BigNumberish],
	): string;
	encodeFunctionData(
		functionFragment: "process_token_withdrawal",
		values: [BigNumberish, BytesLike, BytesLike, BigNumberish],
	): string;
	encodeFunctionData(functionFragment: "receiveEncodedMsg", values: [BytesLike]): string;
	encodeFunctionData(functionFragment: "registerApplicationContracts", values: [BigNumberish, BytesLike]): string;
	encodeFunctionData(functionFragment: "sendMsg", values: [BytesLike]): string;
	encodeFunctionData(functionFragment: "wormhole", values?: undefined): string;
	encodeFunctionData(functionFragment: "wormhole_fee", values?: undefined): string;

	decodeFunctionResult(functionFragment: "CANCEL_SOL", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "CANCEL_TOKEN", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "CHAIN_ID", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "CONSISTENCY_LEVEL", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "DEPOSIT_SOL", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "DEPOSIT_TOKEN", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "INSTANT_SOL", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "INSTANT_TOKEN", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "PAUSE_SOL", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "PAUSE_TOKEN", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "SOL_STREAM", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "SOL_STREAM_UPDATE", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "SOL_WITHDRAW_STREAM", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "TOKEN_STREAM", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "TOKEN_STREAM_UPDATE", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "TOKEN_WITHDRAW_STREAM", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "WETH", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "WITHDRAW_SOL", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "WITHDRAW_TOKEN", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "_wormhole_fee", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "encode_native_stream", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "encode_native_stream_update", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "encode_native_withdraw_stream", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "encode_process_cancel_native_stream", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "encode_process_cancel_token_stream", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "encode_process_deposit_sol", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "encode_process_deposit_token", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "encode_process_instant_native_transfer", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "encode_process_instant_token_transfer", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "encode_process_native_withdrawal", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "encode_process_pause_native_stream", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "encode_process_pause_token_stream", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "encode_process_token_withdrawal", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "encode_token_stream", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "encode_token_stream_update", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "encode_token_withdraw_stream", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "getCurrentMsg", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "process_cancel_native_stream", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "process_cancel_token_stream", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "process_deposit_sol", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "process_deposit_token", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "process_instant_native_transfer", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "process_instant_token_transfer", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "process_native_stream", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "process_native_stream_update", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "process_native_withdraw_stream", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "process_native_withdrawal", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "process_pause_native_stream", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "process_pause_token_stream", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "process_token_stream", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "process_token_stream_update", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "process_token_withdraw_stream", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "process_token_withdrawal", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "receiveEncodedMsg", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "registerApplicationContracts", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "sendMsg", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "wormhole", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "wormhole_fee", data: BytesLike): Result;

	events: {
		"CancelNativeStream(bytes,uint32)": EventFragment;
		"CancelTokenStream(bytes,bytes,uint32)": EventFragment;
		"DepositSol(bytes,uint64,uint32)": EventFragment;
		"DepositToken(bytes,bytes,uint64,uint32)": EventFragment;
		"InstantNativeTransfer(bytes,uint64,uint32)": EventFragment;
		"InstantTokenTransfer(bytes,bytes,uint64,uint32)": EventFragment;
		"NativeStream(bytes,bytes,uint64,uint32)": EventFragment;
		"NativeStreamUpdate(bytes,bytes,uint64,uint32)": EventFragment;
		"NativeWithdrawal(bytes,uint64,uint32)": EventFragment;
		"PauseNativeStream(bytes,uint32)": EventFragment;
		"PauseTokenStream(bytes,bytes,uint32)": EventFragment;
		"TokenStream(bytes,bytes,bytes,uint64,uint32)": EventFragment;
		"TokenStreamUpdate(bytes,bytes,bytes,uint64,uint32)": EventFragment;
		"TokenWithdrawal(bytes,bytes,uint64,uint32)": EventFragment;
		"WithdrawStream(bytes,uint32)": EventFragment;
		"WithdrawToken(bytes,bytes,uint32)": EventFragment;
	};

	getEvent(nameOrSignatureOrTopic: "CancelNativeStream"): EventFragment;
	getEvent(nameOrSignatureOrTopic: "CancelTokenStream"): EventFragment;
	getEvent(nameOrSignatureOrTopic: "DepositSol"): EventFragment;
	getEvent(nameOrSignatureOrTopic: "DepositToken"): EventFragment;
	getEvent(nameOrSignatureOrTopic: "InstantNativeTransfer"): EventFragment;
	getEvent(nameOrSignatureOrTopic: "InstantTokenTransfer"): EventFragment;
	getEvent(nameOrSignatureOrTopic: "NativeStream"): EventFragment;
	getEvent(nameOrSignatureOrTopic: "NativeStreamUpdate"): EventFragment;
	getEvent(nameOrSignatureOrTopic: "NativeWithdrawal"): EventFragment;
	getEvent(nameOrSignatureOrTopic: "PauseNativeStream"): EventFragment;
	getEvent(nameOrSignatureOrTopic: "PauseTokenStream"): EventFragment;
	getEvent(nameOrSignatureOrTopic: "TokenStream"): EventFragment;
	getEvent(nameOrSignatureOrTopic: "TokenStreamUpdate"): EventFragment;
	getEvent(nameOrSignatureOrTopic: "TokenWithdrawal"): EventFragment;
	getEvent(nameOrSignatureOrTopic: "WithdrawStream"): EventFragment;
	getEvent(nameOrSignatureOrTopic: "WithdrawToken"): EventFragment;
}

export type CancelNativeStreamEvent = TypedEvent<[string, number] & { receiver: string; nonce: number }>;

export type CancelTokenStreamEvent = TypedEvent<
	[string, string, number] & {
		receiver: string;
		tokenMint: string;
		nonce: number;
	}
>;

export type DepositSolEvent = TypedEvent<
	[string, BigNumber, number] & {
		depositor: string;
		amount: BigNumber;
		nonce: number;
	}
>;

export type DepositTokenEvent = TypedEvent<
	[string, string, BigNumber, number] & {
		depositor: string;
		tokenMint: string;
		amount: BigNumber;
		nonce: number;
	}
>;

export type InstantNativeTransferEvent = TypedEvent<
	[string, BigNumber, number] & {
		receiver: string;
		amount: BigNumber;
		nonce: number;
	}
>;

export type InstantTokenTransferEvent = TypedEvent<
	[string, string, BigNumber, number] & {
		receiver: string;
		tokenMint: string;
		amount: BigNumber;
		nonce: number;
	}
>;

export type NativeStreamEvent = TypedEvent<
	[string, string, BigNumber, number] & {
		sender: string;
		receiver: string;
		amount: BigNumber;
		nonce: number;
	}
>;

export type NativeStreamUpdateEvent = TypedEvent<
	[string, string, BigNumber, number] & {
		sender: string;
		receiver: string;
		amount: BigNumber;
		nonce: number;
	}
>;

export type NativeWithdrawalEvent = TypedEvent<
	[string, BigNumber, number] & {
		withdrawer: string;
		amount: BigNumber;
		nonce: number;
	}
>;

export type PauseNativeStreamEvent = TypedEvent<[string, number] & { receiver: string; nonce: number }>;

export type PauseTokenStreamEvent = TypedEvent<
	[string, string, number] & {
		receiver: string;
		tokenMint: string;
		nonce: number;
	}
>;

export type TokenStreamEvent = TypedEvent<
	[string, string, string, BigNumber, number] & {
		sender: string;
		receiver: string;
		tokenMint: string;
		amount: BigNumber;
		nonce: number;
	}
>;

export type TokenStreamUpdateEvent = TypedEvent<
	[string, string, string, BigNumber, number] & {
		sender: string;
		receiver: string;
		tokenMint: string;
		amount: BigNumber;
		nonce: number;
	}
>;

export type TokenWithdrawalEvent = TypedEvent<
	[string, string, BigNumber, number] & {
		withdrawer: string;
		tokenMint: string;
		amount: BigNumber;
		nonce: number;
	}
>;

export type WithdrawStreamEvent = TypedEvent<[string, number] & { withdrawer: string; nonce: number }>;

export type WithdrawTokenEvent = TypedEvent<
	[string, string, number] & {
		withdrawer: string;
		tokenMint: string;
		nonce: number;
	}
>;

export class Messenger extends BaseContract {
	connect(signerOrProvider: Signer | Provider | string): this;
	attach(addressOrName: string): this;
	deployed(): Promise<this>;

	listeners<EventArgsArray extends Array<any>, EventArgsObject>(
		eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>,
	): Array<TypedListener<EventArgsArray, EventArgsObject>>;
	off<EventArgsArray extends Array<any>, EventArgsObject>(
		eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
		listener: TypedListener<EventArgsArray, EventArgsObject>,
	): this;
	on<EventArgsArray extends Array<any>, EventArgsObject>(
		eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
		listener: TypedListener<EventArgsArray, EventArgsObject>,
	): this;
	once<EventArgsArray extends Array<any>, EventArgsObject>(
		eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
		listener: TypedListener<EventArgsArray, EventArgsObject>,
	): this;
	removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
		eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
		listener: TypedListener<EventArgsArray, EventArgsObject>,
	): this;
	removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
		eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
	): this;

	listeners(eventName?: string): Array<Listener>;
	off(eventName: string, listener: Listener): this;
	on(eventName: string, listener: Listener): this;
	once(eventName: string, listener: Listener): this;
	removeListener(eventName: string, listener: Listener): this;
	removeAllListeners(eventName?: string): this;

	queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
		event: TypedEventFilter<EventArgsArray, EventArgsObject>,
		fromBlockOrBlockhash?: string | number | undefined,
		toBlock?: string | number | undefined,
	): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

	interface: MessengerInterface;

	functions: {
		CANCEL_SOL(overrides?: CallOverrides): Promise<[number]>;

		CANCEL_TOKEN(overrides?: CallOverrides): Promise<[number]>;

		CHAIN_ID(overrides?: CallOverrides): Promise<[number]>;

		CONSISTENCY_LEVEL(overrides?: CallOverrides): Promise<[number]>;

		DEPOSIT_SOL(overrides?: CallOverrides): Promise<[number]>;

		DEPOSIT_TOKEN(overrides?: CallOverrides): Promise<[number]>;

		INSTANT_SOL(overrides?: CallOverrides): Promise<[number]>;

		INSTANT_TOKEN(overrides?: CallOverrides): Promise<[number]>;

		PAUSE_SOL(overrides?: CallOverrides): Promise<[number]>;

		PAUSE_TOKEN(overrides?: CallOverrides): Promise<[number]>;

		SOL_STREAM(overrides?: CallOverrides): Promise<[number]>;

		SOL_STREAM_UPDATE(overrides?: CallOverrides): Promise<[number]>;

		SOL_WITHDRAW_STREAM(overrides?: CallOverrides): Promise<[number]>;

		TOKEN_STREAM(overrides?: CallOverrides): Promise<[number]>;

		TOKEN_STREAM_UPDATE(overrides?: CallOverrides): Promise<[number]>;

		TOKEN_WITHDRAW_STREAM(overrides?: CallOverrides): Promise<[number]>;

		WETH(overrides?: CallOverrides): Promise<[string]>;

		WITHDRAW_SOL(overrides?: CallOverrides): Promise<[number]>;

		WITHDRAW_TOKEN(overrides?: CallOverrides): Promise<[number]>;

		_wormhole_fee(overrides?: CallOverrides): Promise<[BigNumber]>;

		encode_native_stream(
			processStream: {
				start_time: BigNumberish;
				end_time: BigNumberish;
				amount: BigNumberish;
				toChain: BigNumberish;
				sender: BytesLike;
				receiver: BytesLike;
				can_cancel: BigNumberish;
				can_update: BigNumberish;
			},
			overrides?: CallOverrides,
		): Promise<[string] & { encoded: string }>;

		encode_native_stream_update(
			processStream: {
				start_time: BigNumberish;
				end_time: BigNumberish;
				amount: BigNumberish;
				toChain: BigNumberish;
				sender: BytesLike;
				receiver: BytesLike;
			},
			overrides?: CallOverrides,
		): Promise<[string] & { encoded: string }>;

		encode_native_withdraw_stream(
			processWithdrawStream: { toChain: BigNumberish; withdrawer: BytesLike },
			overrides?: CallOverrides,
		): Promise<[string] & { encoded: string }>;

		encode_process_cancel_native_stream(
			cancelStream: { toChain: BigNumberish; sender: BytesLike },
			overrides?: CallOverrides,
		): Promise<[string] & { encoded: string }>;

		encode_process_cancel_token_stream(
			cancelStream: {
				toChain: BigNumberish;
				sender: BytesLike;
				token_mint: BytesLike;
				reciever_address: BytesLike;
				data_account_address: BytesLike;
			},
			overrides?: CallOverrides,
		): Promise<[string] & { encoded: string }>;

		encode_process_deposit_sol(
			processDeposit: {
				amount: BigNumberish;
				toChain: BigNumberish;
				depositor: BytesLike;
			},
			overrides?: CallOverrides,
		): Promise<[string] & { encoded: string }>;

		encode_process_deposit_token(
			processDeposit: {
				amount: BigNumberish;
				toChain: BigNumberish;
				depositor: BytesLike;
				token_mint: BytesLike;
			},
			overrides?: CallOverrides,
		): Promise<[string] & { encoded: string }>;

		encode_process_instant_native_transfer(
			processTransfer: {
				amount: BigNumberish;
				toChain: BigNumberish;
				withdrawer: BytesLike;
				sender: BytesLike;
			},
			overrides?: CallOverrides,
		): Promise<[string] & { encoded: string }>;

		encode_process_instant_token_transfer(
			processTransfer: {
				amount: BigNumberish;
				toChain: BigNumberish;
				withdrawer: BytesLike;
				token_mint: BytesLike;
				sender: BytesLike;
			},
			overrides?: CallOverrides,
		): Promise<[string] & { encoded: string }>;

		encode_process_native_withdrawal(
			processWithdraw: {
				amount: BigNumberish;
				toChain: BigNumberish;
				withdrawer: BytesLike;
			},
			overrides?: CallOverrides,
		): Promise<[string] & { encoded: string }>;

		encode_process_pause_native_stream(
			pauseStream: { toChain: BigNumberish; sender: BytesLike },
			overrides?: CallOverrides,
		): Promise<[string] & { encoded: string }>;

		encode_process_pause_token_stream(
			pauseStream: {
				toChain: BigNumberish;
				sender: BytesLike;
				token_mint: BytesLike;
				reciever_address: BytesLike;
				data_account_address: BytesLike;
			},
			overrides?: CallOverrides,
		): Promise<[string] & { encoded: string }>;

		encode_process_token_withdrawal(
			processWithdraw: {
				amount: BigNumberish;
				toChain: BigNumberish;
				withdrawer: BytesLike;
				token_mint: BytesLike;
			},
			overrides?: CallOverrides,
		): Promise<[string] & { encoded: string }>;

		encode_token_stream(
			processStream: {
				start_time: BigNumberish;
				end_time: BigNumberish;
				amount: BigNumberish;
				toChain: BigNumberish;
				sender: BytesLike;
				receiver: BytesLike;
				can_cancel: BigNumberish;
				can_update: BigNumberish;
				token_mint: BytesLike;
			},
			overrides?: CallOverrides,
		): Promise<[string] & { encoded: string }>;

		encode_token_stream_update(
			processStream: {
				start_time: BigNumberish;
				end_time: BigNumberish;
				amount: BigNumberish;
				toChain: BigNumberish;
				sender: BytesLike;
				receiver: BytesLike;
				token_mint: BytesLike;
				data_account_address: BytesLike;
			},
			overrides?: CallOverrides,
		): Promise<[string] & { encoded: string }>;

		encode_token_withdraw_stream(
			processWithdrawStream: {
				toChain: BigNumberish;
				withdrawer: BytesLike;
				token_mint: BytesLike;
				sender_address: BytesLike;
				data_account_address: BytesLike;
			},
			overrides?: CallOverrides,
		): Promise<[string] & { encoded: string }>;

		getCurrentMsg(overrides?: CallOverrides): Promise<[string]>;

		process_cancel_native_stream(
			sender: BytesLike,
			arbiter_fee: BigNumberish,
			overrides?: PayableOverrides & { from?: string | Promise<string> },
		): Promise<ContractTransaction>;

		process_cancel_token_stream(
			sender: BytesLike,
			token_mint: BytesLike,
			reciever_address: BytesLike,
			data_account_address: BytesLike,
			arbiter_fee: BigNumberish,
			overrides?: PayableOverrides & { from?: string | Promise<string> },
		): Promise<ContractTransaction>;

		process_deposit_sol(
			amount: BigNumberish,
			depositor: BytesLike,
			arbiter_fee: BigNumberish,
			overrides?: PayableOverrides & { from?: string | Promise<string> },
		): Promise<ContractTransaction>;

		process_deposit_token(
			amount: BigNumberish,
			depositor: BytesLike,
			token_mint: BytesLike,
			arbiter_fee: BigNumberish,
			overrides?: PayableOverrides & { from?: string | Promise<string> },
		): Promise<ContractTransaction>;

		process_instant_native_transfer(
			amount: BigNumberish,
			sender: BytesLike,
			withdrawer: BytesLike,
			arbiter_fee: BigNumberish,
			overrides?: PayableOverrides & { from?: string | Promise<string> },
		): Promise<ContractTransaction>;

		process_instant_token_transfer(
			amount: BigNumberish,
			sender: BytesLike,
			withdrawer: BytesLike,
			token_mint: BytesLike,
			arbiter_fee: BigNumberish,
			overrides?: PayableOverrides & { from?: string | Promise<string> },
		): Promise<ContractTransaction>;

		process_native_stream(
			start_time: BigNumberish,
			end_time: BigNumberish,
			amount: BigNumberish,
			receiver: BytesLike,
			sender: BytesLike,
			can_cancel: BigNumberish,
			can_update: BigNumberish,
			arbiter_fee: BigNumberish,
			overrides?: PayableOverrides & { from?: string | Promise<string> },
		): Promise<ContractTransaction>;

		process_native_stream_update(
			start_time: BigNumberish,
			end_time: BigNumberish,
			amount: BigNumberish,
			receiver: BytesLike,
			sender: BytesLike,
			arbiter_fee: BigNumberish,
			overrides?: PayableOverrides & { from?: string | Promise<string> },
		): Promise<ContractTransaction>;

		process_native_withdraw_stream(
			withdrawer: BytesLike,
			arbiter_fee: BigNumberish,
			overrides?: PayableOverrides & { from?: string | Promise<string> },
		): Promise<ContractTransaction>;

		process_native_withdrawal(
			amount: BigNumberish,
			sender: BytesLike,
			arbiter_fee: BigNumberish,
			overrides?: PayableOverrides & { from?: string | Promise<string> },
		): Promise<ContractTransaction>;

		process_pause_native_stream(
			sender: BytesLike,
			arbiter_fee: BigNumberish,
			overrides?: PayableOverrides & { from?: string | Promise<string> },
		): Promise<ContractTransaction>;

		process_pause_token_stream(
			sender: BytesLike,
			token_mint: BytesLike,
			reciever_address: BytesLike,
			data_account_address: BytesLike,
			arbiter_fee: BigNumberish,
			overrides?: PayableOverrides & { from?: string | Promise<string> },
		): Promise<ContractTransaction>;

		process_token_stream(
			start_time: BigNumberish,
			end_time: BigNumberish,
			amount: BigNumberish,
			receiver: BytesLike,
			sender: BytesLike,
			can_cancel: BigNumberish,
			can_update: BigNumberish,
			token_mint: BytesLike,
			arbiter_fee: BigNumberish,
			overrides?: PayableOverrides & { from?: string | Promise<string> },
		): Promise<ContractTransaction>;

		process_token_stream_update(
			start_time: BigNumberish,
			end_time: BigNumberish,
			amount: BigNumberish,
			receiver: BytesLike,
			sender: BytesLike,
			token_mint: BytesLike,
			data_account_address: BytesLike,
			arbiter_fee: BigNumberish,
			overrides?: PayableOverrides & { from?: string | Promise<string> },
		): Promise<ContractTransaction>;

		process_token_withdraw_stream(
			withdrawer: BytesLike,
			token_mint: BytesLike,
			sender_address: BytesLike,
			data_account_address: BytesLike,
			arbiter_fee: BigNumberish,
			overrides?: PayableOverrides & { from?: string | Promise<string> },
		): Promise<ContractTransaction>;

		process_token_withdrawal(
			amount: BigNumberish,
			sender: BytesLike,
			token_mint: BytesLike,
			arbiter_fee: BigNumberish,
			overrides?: PayableOverrides & { from?: string | Promise<string> },
		): Promise<ContractTransaction>;

		receiveEncodedMsg(
			encodedMsg: BytesLike,
			overrides?: Overrides & { from?: string | Promise<string> },
		): Promise<ContractTransaction>;

		registerApplicationContracts(
			chainId: BigNumberish,
			applicationAddr: BytesLike,
			overrides?: Overrides & { from?: string | Promise<string> },
		): Promise<ContractTransaction>;

		sendMsg(str: BytesLike, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

		wormhole(overrides?: CallOverrides): Promise<[string]>;

		wormhole_fee(overrides?: CallOverrides): Promise<[BigNumber]>;
	};

	CANCEL_SOL(overrides?: CallOverrides): Promise<number>;

	CANCEL_TOKEN(overrides?: CallOverrides): Promise<number>;

	CHAIN_ID(overrides?: CallOverrides): Promise<number>;

	CONSISTENCY_LEVEL(overrides?: CallOverrides): Promise<number>;

	DEPOSIT_SOL(overrides?: CallOverrides): Promise<number>;

	DEPOSIT_TOKEN(overrides?: CallOverrides): Promise<number>;

	INSTANT_SOL(overrides?: CallOverrides): Promise<number>;

	INSTANT_TOKEN(overrides?: CallOverrides): Promise<number>;

	PAUSE_SOL(overrides?: CallOverrides): Promise<number>;

	PAUSE_TOKEN(overrides?: CallOverrides): Promise<number>;

	SOL_STREAM(overrides?: CallOverrides): Promise<number>;

	SOL_STREAM_UPDATE(overrides?: CallOverrides): Promise<number>;

	SOL_WITHDRAW_STREAM(overrides?: CallOverrides): Promise<number>;

	TOKEN_STREAM(overrides?: CallOverrides): Promise<number>;

	TOKEN_STREAM_UPDATE(overrides?: CallOverrides): Promise<number>;

	TOKEN_WITHDRAW_STREAM(overrides?: CallOverrides): Promise<number>;

	WETH(overrides?: CallOverrides): Promise<string>;

	WITHDRAW_SOL(overrides?: CallOverrides): Promise<number>;

	WITHDRAW_TOKEN(overrides?: CallOverrides): Promise<number>;

	_wormhole_fee(overrides?: CallOverrides): Promise<BigNumber>;

	encode_native_stream(
		processStream: {
			start_time: BigNumberish;
			end_time: BigNumberish;
			amount: BigNumberish;
			toChain: BigNumberish;
			sender: BytesLike;
			receiver: BytesLike;
			can_cancel: BigNumberish;
			can_update: BigNumberish;
		},
		overrides?: CallOverrides,
	): Promise<string>;

	encode_native_stream_update(
		processStream: {
			start_time: BigNumberish;
			end_time: BigNumberish;
			amount: BigNumberish;
			toChain: BigNumberish;
			sender: BytesLike;
			receiver: BytesLike;
		},
		overrides?: CallOverrides,
	): Promise<string>;

	encode_native_withdraw_stream(
		processWithdrawStream: { toChain: BigNumberish; withdrawer: BytesLike },
		overrides?: CallOverrides,
	): Promise<string>;

	encode_process_cancel_native_stream(
		cancelStream: { toChain: BigNumberish; sender: BytesLike },
		overrides?: CallOverrides,
	): Promise<string>;

	encode_process_cancel_token_stream(
		cancelStream: {
			toChain: BigNumberish;
			sender: BytesLike;
			token_mint: BytesLike;
			reciever_address: BytesLike;
			data_account_address: BytesLike;
		},
		overrides?: CallOverrides,
	): Promise<string>;

	encode_process_deposit_sol(
		processDeposit: {
			amount: BigNumberish;
			toChain: BigNumberish;
			depositor: BytesLike;
		},
		overrides?: CallOverrides,
	): Promise<string>;

	encode_process_deposit_token(
		processDeposit: {
			amount: BigNumberish;
			toChain: BigNumberish;
			depositor: BytesLike;
			token_mint: BytesLike;
		},
		overrides?: CallOverrides,
	): Promise<string>;

	encode_process_instant_native_transfer(
		processTransfer: {
			amount: BigNumberish;
			toChain: BigNumberish;
			withdrawer: BytesLike;
			sender: BytesLike;
		},
		overrides?: CallOverrides,
	): Promise<string>;

	encode_process_instant_token_transfer(
		processTransfer: {
			amount: BigNumberish;
			toChain: BigNumberish;
			withdrawer: BytesLike;
			token_mint: BytesLike;
			sender: BytesLike;
		},
		overrides?: CallOverrides,
	): Promise<string>;

	encode_process_native_withdrawal(
		processWithdraw: {
			amount: BigNumberish;
			toChain: BigNumberish;
			withdrawer: BytesLike;
		},
		overrides?: CallOverrides,
	): Promise<string>;

	encode_process_pause_native_stream(
		pauseStream: { toChain: BigNumberish; sender: BytesLike },
		overrides?: CallOverrides,
	): Promise<string>;

	encode_process_pause_token_stream(
		pauseStream: {
			toChain: BigNumberish;
			sender: BytesLike;
			token_mint: BytesLike;
			reciever_address: BytesLike;
			data_account_address: BytesLike;
		},
		overrides?: CallOverrides,
	): Promise<string>;

	encode_process_token_withdrawal(
		processWithdraw: {
			amount: BigNumberish;
			toChain: BigNumberish;
			withdrawer: BytesLike;
			token_mint: BytesLike;
		},
		overrides?: CallOverrides,
	): Promise<string>;

	encode_token_stream(
		processStream: {
			start_time: BigNumberish;
			end_time: BigNumberish;
			amount: BigNumberish;
			toChain: BigNumberish;
			sender: BytesLike;
			receiver: BytesLike;
			can_cancel: BigNumberish;
			can_update: BigNumberish;
			token_mint: BytesLike;
		},
		overrides?: CallOverrides,
	): Promise<string>;

	encode_token_stream_update(
		processStream: {
			start_time: BigNumberish;
			end_time: BigNumberish;
			amount: BigNumberish;
			toChain: BigNumberish;
			sender: BytesLike;
			receiver: BytesLike;
			token_mint: BytesLike;
			data_account_address: BytesLike;
		},
		overrides?: CallOverrides,
	): Promise<string>;

	encode_token_withdraw_stream(
		processWithdrawStream: {
			toChain: BigNumberish;
			withdrawer: BytesLike;
			token_mint: BytesLike;
			sender_address: BytesLike;
			data_account_address: BytesLike;
		},
		overrides?: CallOverrides,
	): Promise<string>;

	getCurrentMsg(overrides?: CallOverrides): Promise<string>;

	process_cancel_native_stream(
		sender: BytesLike,
		arbiter_fee: BigNumberish,
		overrides?: PayableOverrides & { from?: string | Promise<string> },
	): Promise<ContractTransaction>;

	process_cancel_token_stream(
		sender: BytesLike,
		token_mint: BytesLike,
		reciever_address: BytesLike,
		data_account_address: BytesLike,
		arbiter_fee: BigNumberish,
		overrides?: PayableOverrides & { from?: string | Promise<string> },
	): Promise<ContractTransaction>;

	process_deposit_sol(
		amount: BigNumberish,
		depositor: BytesLike,
		arbiter_fee: BigNumberish,
		overrides?: PayableOverrides & { from?: string | Promise<string> },
	): Promise<ContractTransaction>;

	process_deposit_token(
		amount: BigNumberish,
		depositor: BytesLike,
		token_mint: BytesLike,
		arbiter_fee: BigNumberish,
		overrides?: PayableOverrides & { from?: string | Promise<string> },
	): Promise<ContractTransaction>;

	process_instant_native_transfer(
		amount: BigNumberish,
		sender: BytesLike,
		withdrawer: BytesLike,
		arbiter_fee: BigNumberish,
		overrides?: PayableOverrides & { from?: string | Promise<string> },
	): Promise<ContractTransaction>;

	process_instant_token_transfer(
		amount: BigNumberish,
		sender: BytesLike,
		withdrawer: BytesLike,
		token_mint: BytesLike,
		arbiter_fee: BigNumberish,
		overrides?: PayableOverrides & { from?: string | Promise<string> },
	): Promise<ContractTransaction>;

	process_native_stream(
		start_time: BigNumberish,
		end_time: BigNumberish,
		amount: BigNumberish,
		receiver: BytesLike,
		sender: BytesLike,
		can_cancel: BigNumberish,
		can_update: BigNumberish,
		arbiter_fee: BigNumberish,
		overrides?: PayableOverrides & { from?: string | Promise<string> },
	): Promise<ContractTransaction>;

	process_native_stream_update(
		start_time: BigNumberish,
		end_time: BigNumberish,
		amount: BigNumberish,
		receiver: BytesLike,
		sender: BytesLike,
		arbiter_fee: BigNumberish,
		overrides?: PayableOverrides & { from?: string | Promise<string> },
	): Promise<ContractTransaction>;

	process_native_withdraw_stream(
		withdrawer: BytesLike,
		arbiter_fee: BigNumberish,
		overrides?: PayableOverrides & { from?: string | Promise<string> },
	): Promise<ContractTransaction>;

	process_native_withdrawal(
		amount: BigNumberish,
		sender: BytesLike,
		arbiter_fee: BigNumberish,
		overrides?: PayableOverrides & { from?: string | Promise<string> },
	): Promise<ContractTransaction>;

	process_pause_native_stream(
		sender: BytesLike,
		arbiter_fee: BigNumberish,
		overrides?: PayableOverrides & { from?: string | Promise<string> },
	): Promise<ContractTransaction>;

	process_pause_token_stream(
		sender: BytesLike,
		token_mint: BytesLike,
		reciever_address: BytesLike,
		data_account_address: BytesLike,
		arbiter_fee: BigNumberish,
		overrides?: PayableOverrides & { from?: string | Promise<string> },
	): Promise<ContractTransaction>;

	process_token_stream(
		start_time: BigNumberish,
		end_time: BigNumberish,
		amount: BigNumberish,
		receiver: BytesLike,
		sender: BytesLike,
		can_cancel: BigNumberish,
		can_update: BigNumberish,
		token_mint: BytesLike,
		arbiter_fee: BigNumberish,
		overrides?: PayableOverrides & { from?: string | Promise<string> },
	): Promise<ContractTransaction>;

	process_token_stream_update(
		start_time: BigNumberish,
		end_time: BigNumberish,
		amount: BigNumberish,
		receiver: BytesLike,
		sender: BytesLike,
		token_mint: BytesLike,
		data_account_address: BytesLike,
		arbiter_fee: BigNumberish,
		overrides?: PayableOverrides & { from?: string | Promise<string> },
	): Promise<ContractTransaction>;

	process_token_withdraw_stream(
		withdrawer: BytesLike,
		token_mint: BytesLike,
		sender_address: BytesLike,
		data_account_address: BytesLike,
		arbiter_fee: BigNumberish,
		overrides?: PayableOverrides & { from?: string | Promise<string> },
	): Promise<ContractTransaction>;

	process_token_withdrawal(
		amount: BigNumberish,
		sender: BytesLike,
		token_mint: BytesLike,
		arbiter_fee: BigNumberish,
		overrides?: PayableOverrides & { from?: string | Promise<string> },
	): Promise<ContractTransaction>;

	receiveEncodedMsg(
		encodedMsg: BytesLike,
		overrides?: Overrides & { from?: string | Promise<string> },
	): Promise<ContractTransaction>;

	registerApplicationContracts(
		chainId: BigNumberish,
		applicationAddr: BytesLike,
		overrides?: Overrides & { from?: string | Promise<string> },
	): Promise<ContractTransaction>;

	sendMsg(str: BytesLike, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

	wormhole(overrides?: CallOverrides): Promise<string>;

	wormhole_fee(overrides?: CallOverrides): Promise<BigNumber>;

	callStatic: {
		CANCEL_SOL(overrides?: CallOverrides): Promise<number>;

		CANCEL_TOKEN(overrides?: CallOverrides): Promise<number>;

		CHAIN_ID(overrides?: CallOverrides): Promise<number>;

		CONSISTENCY_LEVEL(overrides?: CallOverrides): Promise<number>;

		DEPOSIT_SOL(overrides?: CallOverrides): Promise<number>;

		DEPOSIT_TOKEN(overrides?: CallOverrides): Promise<number>;

		INSTANT_SOL(overrides?: CallOverrides): Promise<number>;

		INSTANT_TOKEN(overrides?: CallOverrides): Promise<number>;

		PAUSE_SOL(overrides?: CallOverrides): Promise<number>;

		PAUSE_TOKEN(overrides?: CallOverrides): Promise<number>;

		SOL_STREAM(overrides?: CallOverrides): Promise<number>;

		SOL_STREAM_UPDATE(overrides?: CallOverrides): Promise<number>;

		SOL_WITHDRAW_STREAM(overrides?: CallOverrides): Promise<number>;

		TOKEN_STREAM(overrides?: CallOverrides): Promise<number>;

		TOKEN_STREAM_UPDATE(overrides?: CallOverrides): Promise<number>;

		TOKEN_WITHDRAW_STREAM(overrides?: CallOverrides): Promise<number>;

		WETH(overrides?: CallOverrides): Promise<string>;

		WITHDRAW_SOL(overrides?: CallOverrides): Promise<number>;

		WITHDRAW_TOKEN(overrides?: CallOverrides): Promise<number>;

		_wormhole_fee(overrides?: CallOverrides): Promise<BigNumber>;

		encode_native_stream(
			processStream: {
				start_time: BigNumberish;
				end_time: BigNumberish;
				amount: BigNumberish;
				toChain: BigNumberish;
				sender: BytesLike;
				receiver: BytesLike;
				can_cancel: BigNumberish;
				can_update: BigNumberish;
			},
			overrides?: CallOverrides,
		): Promise<string>;

		encode_native_stream_update(
			processStream: {
				start_time: BigNumberish;
				end_time: BigNumberish;
				amount: BigNumberish;
				toChain: BigNumberish;
				sender: BytesLike;
				receiver: BytesLike;
			},
			overrides?: CallOverrides,
		): Promise<string>;

		encode_native_withdraw_stream(
			processWithdrawStream: { toChain: BigNumberish; withdrawer: BytesLike },
			overrides?: CallOverrides,
		): Promise<string>;

		encode_process_cancel_native_stream(
			cancelStream: { toChain: BigNumberish; sender: BytesLike },
			overrides?: CallOverrides,
		): Promise<string>;

		encode_process_cancel_token_stream(
			cancelStream: {
				toChain: BigNumberish;
				sender: BytesLike;
				token_mint: BytesLike;
				reciever_address: BytesLike;
				data_account_address: BytesLike;
			},
			overrides?: CallOverrides,
		): Promise<string>;

		encode_process_deposit_sol(
			processDeposit: {
				amount: BigNumberish;
				toChain: BigNumberish;
				depositor: BytesLike;
			},
			overrides?: CallOverrides,
		): Promise<string>;

		encode_process_deposit_token(
			processDeposit: {
				amount: BigNumberish;
				toChain: BigNumberish;
				depositor: BytesLike;
				token_mint: BytesLike;
			},
			overrides?: CallOverrides,
		): Promise<string>;

		encode_process_instant_native_transfer(
			processTransfer: {
				amount: BigNumberish;
				toChain: BigNumberish;
				withdrawer: BytesLike;
				sender: BytesLike;
			},
			overrides?: CallOverrides,
		): Promise<string>;

		encode_process_instant_token_transfer(
			processTransfer: {
				amount: BigNumberish;
				toChain: BigNumberish;
				withdrawer: BytesLike;
				token_mint: BytesLike;
				sender: BytesLike;
			},
			overrides?: CallOverrides,
		): Promise<string>;

		encode_process_native_withdrawal(
			processWithdraw: {
				amount: BigNumberish;
				toChain: BigNumberish;
				withdrawer: BytesLike;
			},
			overrides?: CallOverrides,
		): Promise<string>;

		encode_process_pause_native_stream(
			pauseStream: { toChain: BigNumberish; sender: BytesLike },
			overrides?: CallOverrides,
		): Promise<string>;

		encode_process_pause_token_stream(
			pauseStream: {
				toChain: BigNumberish;
				sender: BytesLike;
				token_mint: BytesLike;
				reciever_address: BytesLike;
				data_account_address: BytesLike;
			},
			overrides?: CallOverrides,
		): Promise<string>;

		encode_process_token_withdrawal(
			processWithdraw: {
				amount: BigNumberish;
				toChain: BigNumberish;
				withdrawer: BytesLike;
				token_mint: BytesLike;
			},
			overrides?: CallOverrides,
		): Promise<string>;

		encode_token_stream(
			processStream: {
				start_time: BigNumberish;
				end_time: BigNumberish;
				amount: BigNumberish;
				toChain: BigNumberish;
				sender: BytesLike;
				receiver: BytesLike;
				can_cancel: BigNumberish;
				can_update: BigNumberish;
				token_mint: BytesLike;
			},
			overrides?: CallOverrides,
		): Promise<string>;

		encode_token_stream_update(
			processStream: {
				start_time: BigNumberish;
				end_time: BigNumberish;
				amount: BigNumberish;
				toChain: BigNumberish;
				sender: BytesLike;
				receiver: BytesLike;
				token_mint: BytesLike;
				data_account_address: BytesLike;
			},
			overrides?: CallOverrides,
		): Promise<string>;

		encode_token_withdraw_stream(
			processWithdrawStream: {
				toChain: BigNumberish;
				withdrawer: BytesLike;
				token_mint: BytesLike;
				sender_address: BytesLike;
				data_account_address: BytesLike;
			},
			overrides?: CallOverrides,
		): Promise<string>;

		getCurrentMsg(overrides?: CallOverrides): Promise<string>;

		process_cancel_native_stream(
			sender: BytesLike,
			arbiter_fee: BigNumberish,
			overrides?: CallOverrides,
		): Promise<BigNumber>;

		process_cancel_token_stream(
			sender: BytesLike,
			token_mint: BytesLike,
			reciever_address: BytesLike,
			data_account_address: BytesLike,
			arbiter_fee: BigNumberish,
			overrides?: CallOverrides,
		): Promise<BigNumber>;

		process_deposit_sol(
			amount: BigNumberish,
			depositor: BytesLike,
			arbiter_fee: BigNumberish,
			overrides?: CallOverrides,
		): Promise<BigNumber>;

		process_deposit_token(
			amount: BigNumberish,
			depositor: BytesLike,
			token_mint: BytesLike,
			arbiter_fee: BigNumberish,
			overrides?: CallOverrides,
		): Promise<BigNumber>;

		process_instant_native_transfer(
			amount: BigNumberish,
			sender: BytesLike,
			withdrawer: BytesLike,
			arbiter_fee: BigNumberish,
			overrides?: CallOverrides,
		): Promise<BigNumber>;

		process_instant_token_transfer(
			amount: BigNumberish,
			sender: BytesLike,
			withdrawer: BytesLike,
			token_mint: BytesLike,
			arbiter_fee: BigNumberish,
			overrides?: CallOverrides,
		): Promise<BigNumber>;

		process_native_stream(
			start_time: BigNumberish,
			end_time: BigNumberish,
			amount: BigNumberish,
			receiver: BytesLike,
			sender: BytesLike,
			can_cancel: BigNumberish,
			can_update: BigNumberish,
			arbiter_fee: BigNumberish,
			overrides?: CallOverrides,
		): Promise<BigNumber>;

		process_native_stream_update(
			start_time: BigNumberish,
			end_time: BigNumberish,
			amount: BigNumberish,
			receiver: BytesLike,
			sender: BytesLike,
			arbiter_fee: BigNumberish,
			overrides?: CallOverrides,
		): Promise<BigNumber>;

		process_native_withdraw_stream(
			withdrawer: BytesLike,
			arbiter_fee: BigNumberish,
			overrides?: CallOverrides,
		): Promise<BigNumber>;

		process_native_withdrawal(
			amount: BigNumberish,
			sender: BytesLike,
			arbiter_fee: BigNumberish,
			overrides?: CallOverrides,
		): Promise<BigNumber>;

		process_pause_native_stream(
			sender: BytesLike,
			arbiter_fee: BigNumberish,
			overrides?: CallOverrides,
		): Promise<BigNumber>;

		process_pause_token_stream(
			sender: BytesLike,
			token_mint: BytesLike,
			reciever_address: BytesLike,
			data_account_address: BytesLike,
			arbiter_fee: BigNumberish,
			overrides?: CallOverrides,
		): Promise<BigNumber>;

		process_token_stream(
			start_time: BigNumberish,
			end_time: BigNumberish,
			amount: BigNumberish,
			receiver: BytesLike,
			sender: BytesLike,
			can_cancel: BigNumberish,
			can_update: BigNumberish,
			token_mint: BytesLike,
			arbiter_fee: BigNumberish,
			overrides?: CallOverrides,
		): Promise<BigNumber>;

		process_token_stream_update(
			start_time: BigNumberish,
			end_time: BigNumberish,
			amount: BigNumberish,
			receiver: BytesLike,
			sender: BytesLike,
			token_mint: BytesLike,
			data_account_address: BytesLike,
			arbiter_fee: BigNumberish,
			overrides?: CallOverrides,
		): Promise<BigNumber>;

		process_token_withdraw_stream(
			withdrawer: BytesLike,
			token_mint: BytesLike,
			sender_address: BytesLike,
			data_account_address: BytesLike,
			arbiter_fee: BigNumberish,
			overrides?: CallOverrides,
		): Promise<BigNumber>;

		process_token_withdrawal(
			amount: BigNumberish,
			sender: BytesLike,
			token_mint: BytesLike,
			arbiter_fee: BigNumberish,
			overrides?: CallOverrides,
		): Promise<BigNumber>;

		receiveEncodedMsg(encodedMsg: BytesLike, overrides?: CallOverrides): Promise<void>;

		registerApplicationContracts(
			chainId: BigNumberish,
			applicationAddr: BytesLike,
			overrides?: CallOverrides,
		): Promise<void>;

		sendMsg(str: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

		wormhole(overrides?: CallOverrides): Promise<string>;

		wormhole_fee(overrides?: CallOverrides): Promise<BigNumber>;
	};

	filters: {
		"CancelNativeStream(bytes,uint32)"(
			receiver?: null,
			nonce?: null,
		): TypedEventFilter<[string, number], { receiver: string; nonce: number }>;

		CancelNativeStream(
			receiver?: null,
			nonce?: null,
		): TypedEventFilter<[string, number], { receiver: string; nonce: number }>;

		"CancelTokenStream(bytes,bytes,uint32)"(
			receiver?: null,
			tokenMint?: null,
			nonce?: null,
		): TypedEventFilter<[string, string, number], { receiver: string; tokenMint: string; nonce: number }>;

		CancelTokenStream(
			receiver?: null,
			tokenMint?: null,
			nonce?: null,
		): TypedEventFilter<[string, string, number], { receiver: string; tokenMint: string; nonce: number }>;

		"DepositSol(bytes,uint64,uint32)"(
			depositor?: null,
			amount?: null,
			nonce?: null,
		): TypedEventFilter<[string, BigNumber, number], { depositor: string; amount: BigNumber; nonce: number }>;

		DepositSol(
			depositor?: null,
			amount?: null,
			nonce?: null,
		): TypedEventFilter<[string, BigNumber, number], { depositor: string; amount: BigNumber; nonce: number }>;

		"DepositToken(bytes,bytes,uint64,uint32)"(
			depositor?: null,
			tokenMint?: null,
			amount?: null,
			nonce?: null,
		): TypedEventFilter<
			[string, string, BigNumber, number],
			{ depositor: string; tokenMint: string; amount: BigNumber; nonce: number }
		>;

		DepositToken(
			depositor?: null,
			tokenMint?: null,
			amount?: null,
			nonce?: null,
		): TypedEventFilter<
			[string, string, BigNumber, number],
			{ depositor: string; tokenMint: string; amount: BigNumber; nonce: number }
		>;

		"InstantNativeTransfer(bytes,uint64,uint32)"(
			receiver?: null,
			amount?: null,
			nonce?: null,
		): TypedEventFilter<[string, BigNumber, number], { receiver: string; amount: BigNumber; nonce: number }>;

		InstantNativeTransfer(
			receiver?: null,
			amount?: null,
			nonce?: null,
		): TypedEventFilter<[string, BigNumber, number], { receiver: string; amount: BigNumber; nonce: number }>;

		"InstantTokenTransfer(bytes,bytes,uint64,uint32)"(
			receiver?: null,
			tokenMint?: null,
			amount?: null,
			nonce?: null,
		): TypedEventFilter<
			[string, string, BigNumber, number],
			{ receiver: string; tokenMint: string; amount: BigNumber; nonce: number }
		>;

		InstantTokenTransfer(
			receiver?: null,
			tokenMint?: null,
			amount?: null,
			nonce?: null,
		): TypedEventFilter<
			[string, string, BigNumber, number],
			{ receiver: string; tokenMint: string; amount: BigNumber; nonce: number }
		>;

		"NativeStream(bytes,bytes,uint64,uint32)"(
			sender?: null,
			receiver?: null,
			amount?: null,
			nonce?: null,
		): TypedEventFilter<
			[string, string, BigNumber, number],
			{ sender: string; receiver: string; amount: BigNumber; nonce: number }
		>;

		NativeStream(
			sender?: null,
			receiver?: null,
			amount?: null,
			nonce?: null,
		): TypedEventFilter<
			[string, string, BigNumber, number],
			{ sender: string; receiver: string; amount: BigNumber; nonce: number }
		>;

		"NativeStreamUpdate(bytes,bytes,uint64,uint32)"(
			sender?: null,
			receiver?: null,
			amount?: null,
			nonce?: null,
		): TypedEventFilter<
			[string, string, BigNumber, number],
			{ sender: string; receiver: string; amount: BigNumber; nonce: number }
		>;

		NativeStreamUpdate(
			sender?: null,
			receiver?: null,
			amount?: null,
			nonce?: null,
		): TypedEventFilter<
			[string, string, BigNumber, number],
			{ sender: string; receiver: string; amount: BigNumber; nonce: number }
		>;

		"NativeWithdrawal(bytes,uint64,uint32)"(
			withdrawer?: null,
			amount?: null,
			nonce?: null,
		): TypedEventFilter<[string, BigNumber, number], { withdrawer: string; amount: BigNumber; nonce: number }>;

		NativeWithdrawal(
			withdrawer?: null,
			amount?: null,
			nonce?: null,
		): TypedEventFilter<[string, BigNumber, number], { withdrawer: string; amount: BigNumber; nonce: number }>;

		"PauseNativeStream(bytes,uint32)"(
			receiver?: null,
			nonce?: null,
		): TypedEventFilter<[string, number], { receiver: string; nonce: number }>;

		PauseNativeStream(
			receiver?: null,
			nonce?: null,
		): TypedEventFilter<[string, number], { receiver: string; nonce: number }>;

		"PauseTokenStream(bytes,bytes,uint32)"(
			receiver?: null,
			tokenMint?: null,
			nonce?: null,
		): TypedEventFilter<[string, string, number], { receiver: string; tokenMint: string; nonce: number }>;

		PauseTokenStream(
			receiver?: null,
			tokenMint?: null,
			nonce?: null,
		): TypedEventFilter<[string, string, number], { receiver: string; tokenMint: string; nonce: number }>;

		"TokenStream(bytes,bytes,bytes,uint64,uint32)"(
			sender?: null,
			receiver?: null,
			tokenMint?: null,
			amount?: null,
			nonce?: null,
		): TypedEventFilter<
			[string, string, string, BigNumber, number],
			{
				sender: string;
				receiver: string;
				tokenMint: string;
				amount: BigNumber;
				nonce: number;
			}
		>;

		TokenStream(
			sender?: null,
			receiver?: null,
			tokenMint?: null,
			amount?: null,
			nonce?: null,
		): TypedEventFilter<
			[string, string, string, BigNumber, number],
			{
				sender: string;
				receiver: string;
				tokenMint: string;
				amount: BigNumber;
				nonce: number;
			}
		>;

		"TokenStreamUpdate(bytes,bytes,bytes,uint64,uint32)"(
			sender?: null,
			receiver?: null,
			tokenMint?: null,
			amount?: null,
			nonce?: null,
		): TypedEventFilter<
			[string, string, string, BigNumber, number],
			{
				sender: string;
				receiver: string;
				tokenMint: string;
				amount: BigNumber;
				nonce: number;
			}
		>;

		TokenStreamUpdate(
			sender?: null,
			receiver?: null,
			tokenMint?: null,
			amount?: null,
			nonce?: null,
		): TypedEventFilter<
			[string, string, string, BigNumber, number],
			{
				sender: string;
				receiver: string;
				tokenMint: string;
				amount: BigNumber;
				nonce: number;
			}
		>;

		"TokenWithdrawal(bytes,bytes,uint64,uint32)"(
			withdrawer?: null,
			tokenMint?: null,
			amount?: null,
			nonce?: null,
		): TypedEventFilter<
			[string, string, BigNumber, number],
			{
				withdrawer: string;
				tokenMint: string;
				amount: BigNumber;
				nonce: number;
			}
		>;

		TokenWithdrawal(
			withdrawer?: null,
			tokenMint?: null,
			amount?: null,
			nonce?: null,
		): TypedEventFilter<
			[string, string, BigNumber, number],
			{
				withdrawer: string;
				tokenMint: string;
				amount: BigNumber;
				nonce: number;
			}
		>;

		"WithdrawStream(bytes,uint32)"(
			withdrawer?: null,
			nonce?: null,
		): TypedEventFilter<[string, number], { withdrawer: string; nonce: number }>;

		WithdrawStream(
			withdrawer?: null,
			nonce?: null,
		): TypedEventFilter<[string, number], { withdrawer: string; nonce: number }>;

		"WithdrawToken(bytes,bytes,uint32)"(
			withdrawer?: null,
			tokenMint?: null,
			nonce?: null,
		): TypedEventFilter<[string, string, number], { withdrawer: string; tokenMint: string; nonce: number }>;

		WithdrawToken(
			withdrawer?: null,
			tokenMint?: null,
			nonce?: null,
		): TypedEventFilter<[string, string, number], { withdrawer: string; tokenMint: string; nonce: number }>;
	};

	estimateGas: {
		CANCEL_SOL(overrides?: CallOverrides): Promise<BigNumber>;

		CANCEL_TOKEN(overrides?: CallOverrides): Promise<BigNumber>;

		CHAIN_ID(overrides?: CallOverrides): Promise<BigNumber>;

		CONSISTENCY_LEVEL(overrides?: CallOverrides): Promise<BigNumber>;

		DEPOSIT_SOL(overrides?: CallOverrides): Promise<BigNumber>;

		DEPOSIT_TOKEN(overrides?: CallOverrides): Promise<BigNumber>;

		INSTANT_SOL(overrides?: CallOverrides): Promise<BigNumber>;

		INSTANT_TOKEN(overrides?: CallOverrides): Promise<BigNumber>;

		PAUSE_SOL(overrides?: CallOverrides): Promise<BigNumber>;

		PAUSE_TOKEN(overrides?: CallOverrides): Promise<BigNumber>;

		SOL_STREAM(overrides?: CallOverrides): Promise<BigNumber>;

		SOL_STREAM_UPDATE(overrides?: CallOverrides): Promise<BigNumber>;

		SOL_WITHDRAW_STREAM(overrides?: CallOverrides): Promise<BigNumber>;

		TOKEN_STREAM(overrides?: CallOverrides): Promise<BigNumber>;

		TOKEN_STREAM_UPDATE(overrides?: CallOverrides): Promise<BigNumber>;

		TOKEN_WITHDRAW_STREAM(overrides?: CallOverrides): Promise<BigNumber>;

		WETH(overrides?: CallOverrides): Promise<BigNumber>;

		WITHDRAW_SOL(overrides?: CallOverrides): Promise<BigNumber>;

		WITHDRAW_TOKEN(overrides?: CallOverrides): Promise<BigNumber>;

		_wormhole_fee(overrides?: CallOverrides): Promise<BigNumber>;

		encode_native_stream(
			processStream: {
				start_time: BigNumberish;
				end_time: BigNumberish;
				amount: BigNumberish;
				toChain: BigNumberish;
				sender: BytesLike;
				receiver: BytesLike;
				can_cancel: BigNumberish;
				can_update: BigNumberish;
			},
			overrides?: CallOverrides,
		): Promise<BigNumber>;

		encode_native_stream_update(
			processStream: {
				start_time: BigNumberish;
				end_time: BigNumberish;
				amount: BigNumberish;
				toChain: BigNumberish;
				sender: BytesLike;
				receiver: BytesLike;
			},
			overrides?: CallOverrides,
		): Promise<BigNumber>;

		encode_native_withdraw_stream(
			processWithdrawStream: { toChain: BigNumberish; withdrawer: BytesLike },
			overrides?: CallOverrides,
		): Promise<BigNumber>;

		encode_process_cancel_native_stream(
			cancelStream: { toChain: BigNumberish; sender: BytesLike },
			overrides?: CallOverrides,
		): Promise<BigNumber>;

		encode_process_cancel_token_stream(
			cancelStream: {
				toChain: BigNumberish;
				sender: BytesLike;
				token_mint: BytesLike;
				reciever_address: BytesLike;
				data_account_address: BytesLike;
			},
			overrides?: CallOverrides,
		): Promise<BigNumber>;

		encode_process_deposit_sol(
			processDeposit: {
				amount: BigNumberish;
				toChain: BigNumberish;
				depositor: BytesLike;
			},
			overrides?: CallOverrides,
		): Promise<BigNumber>;

		encode_process_deposit_token(
			processDeposit: {
				amount: BigNumberish;
				toChain: BigNumberish;
				depositor: BytesLike;
				token_mint: BytesLike;
			},
			overrides?: CallOverrides,
		): Promise<BigNumber>;

		encode_process_instant_native_transfer(
			processTransfer: {
				amount: BigNumberish;
				toChain: BigNumberish;
				withdrawer: BytesLike;
				sender: BytesLike;
			},
			overrides?: CallOverrides,
		): Promise<BigNumber>;

		encode_process_instant_token_transfer(
			processTransfer: {
				amount: BigNumberish;
				toChain: BigNumberish;
				withdrawer: BytesLike;
				token_mint: BytesLike;
				sender: BytesLike;
			},
			overrides?: CallOverrides,
		): Promise<BigNumber>;

		encode_process_native_withdrawal(
			processWithdraw: {
				amount: BigNumberish;
				toChain: BigNumberish;
				withdrawer: BytesLike;
			},
			overrides?: CallOverrides,
		): Promise<BigNumber>;

		encode_process_pause_native_stream(
			pauseStream: { toChain: BigNumberish; sender: BytesLike },
			overrides?: CallOverrides,
		): Promise<BigNumber>;

		encode_process_pause_token_stream(
			pauseStream: {
				toChain: BigNumberish;
				sender: BytesLike;
				token_mint: BytesLike;
				reciever_address: BytesLike;
				data_account_address: BytesLike;
			},
			overrides?: CallOverrides,
		): Promise<BigNumber>;

		encode_process_token_withdrawal(
			processWithdraw: {
				amount: BigNumberish;
				toChain: BigNumberish;
				withdrawer: BytesLike;
				token_mint: BytesLike;
			},
			overrides?: CallOverrides,
		): Promise<BigNumber>;

		encode_token_stream(
			processStream: {
				start_time: BigNumberish;
				end_time: BigNumberish;
				amount: BigNumberish;
				toChain: BigNumberish;
				sender: BytesLike;
				receiver: BytesLike;
				can_cancel: BigNumberish;
				can_update: BigNumberish;
				token_mint: BytesLike;
			},
			overrides?: CallOverrides,
		): Promise<BigNumber>;

		encode_token_stream_update(
			processStream: {
				start_time: BigNumberish;
				end_time: BigNumberish;
				amount: BigNumberish;
				toChain: BigNumberish;
				sender: BytesLike;
				receiver: BytesLike;
				token_mint: BytesLike;
				data_account_address: BytesLike;
			},
			overrides?: CallOverrides,
		): Promise<BigNumber>;

		encode_token_withdraw_stream(
			processWithdrawStream: {
				toChain: BigNumberish;
				withdrawer: BytesLike;
				token_mint: BytesLike;
				sender_address: BytesLike;
				data_account_address: BytesLike;
			},
			overrides?: CallOverrides,
		): Promise<BigNumber>;

		getCurrentMsg(overrides?: CallOverrides): Promise<BigNumber>;

		process_cancel_native_stream(
			sender: BytesLike,
			arbiter_fee: BigNumberish,
			overrides?: PayableOverrides & { from?: string | Promise<string> },
		): Promise<BigNumber>;

		process_cancel_token_stream(
			sender: BytesLike,
			token_mint: BytesLike,
			reciever_address: BytesLike,
			data_account_address: BytesLike,
			arbiter_fee: BigNumberish,
			overrides?: PayableOverrides & { from?: string | Promise<string> },
		): Promise<BigNumber>;

		process_deposit_sol(
			amount: BigNumberish,
			depositor: BytesLike,
			arbiter_fee: BigNumberish,
			overrides?: PayableOverrides & { from?: string | Promise<string> },
		): Promise<BigNumber>;

		process_deposit_token(
			amount: BigNumberish,
			depositor: BytesLike,
			token_mint: BytesLike,
			arbiter_fee: BigNumberish,
			overrides?: PayableOverrides & { from?: string | Promise<string> },
		): Promise<BigNumber>;

		process_instant_native_transfer(
			amount: BigNumberish,
			sender: BytesLike,
			withdrawer: BytesLike,
			arbiter_fee: BigNumberish,
			overrides?: PayableOverrides & { from?: string | Promise<string> },
		): Promise<BigNumber>;

		process_instant_token_transfer(
			amount: BigNumberish,
			sender: BytesLike,
			withdrawer: BytesLike,
			token_mint: BytesLike,
			arbiter_fee: BigNumberish,
			overrides?: PayableOverrides & { from?: string | Promise<string> },
		): Promise<BigNumber>;

		process_native_stream(
			start_time: BigNumberish,
			end_time: BigNumberish,
			amount: BigNumberish,
			receiver: BytesLike,
			sender: BytesLike,
			can_cancel: BigNumberish,
			can_update: BigNumberish,
			arbiter_fee: BigNumberish,
			overrides?: PayableOverrides & { from?: string | Promise<string> },
		): Promise<BigNumber>;

		process_native_stream_update(
			start_time: BigNumberish,
			end_time: BigNumberish,
			amount: BigNumberish,
			receiver: BytesLike,
			sender: BytesLike,
			arbiter_fee: BigNumberish,
			overrides?: PayableOverrides & { from?: string | Promise<string> },
		): Promise<BigNumber>;

		process_native_withdraw_stream(
			withdrawer: BytesLike,
			arbiter_fee: BigNumberish,
			overrides?: PayableOverrides & { from?: string | Promise<string> },
		): Promise<BigNumber>;

		process_native_withdrawal(
			amount: BigNumberish,
			sender: BytesLike,
			arbiter_fee: BigNumberish,
			overrides?: PayableOverrides & { from?: string | Promise<string> },
		): Promise<BigNumber>;

		process_pause_native_stream(
			sender: BytesLike,
			arbiter_fee: BigNumberish,
			overrides?: PayableOverrides & { from?: string | Promise<string> },
		): Promise<BigNumber>;

		process_pause_token_stream(
			sender: BytesLike,
			token_mint: BytesLike,
			reciever_address: BytesLike,
			data_account_address: BytesLike,
			arbiter_fee: BigNumberish,
			overrides?: PayableOverrides & { from?: string | Promise<string> },
		): Promise<BigNumber>;

		process_token_stream(
			start_time: BigNumberish,
			end_time: BigNumberish,
			amount: BigNumberish,
			receiver: BytesLike,
			sender: BytesLike,
			can_cancel: BigNumberish,
			can_update: BigNumberish,
			token_mint: BytesLike,
			arbiter_fee: BigNumberish,
			overrides?: PayableOverrides & { from?: string | Promise<string> },
		): Promise<BigNumber>;

		process_token_stream_update(
			start_time: BigNumberish,
			end_time: BigNumberish,
			amount: BigNumberish,
			receiver: BytesLike,
			sender: BytesLike,
			token_mint: BytesLike,
			data_account_address: BytesLike,
			arbiter_fee: BigNumberish,
			overrides?: PayableOverrides & { from?: string | Promise<string> },
		): Promise<BigNumber>;

		process_token_withdraw_stream(
			withdrawer: BytesLike,
			token_mint: BytesLike,
			sender_address: BytesLike,
			data_account_address: BytesLike,
			arbiter_fee: BigNumberish,
			overrides?: PayableOverrides & { from?: string | Promise<string> },
		): Promise<BigNumber>;

		process_token_withdrawal(
			amount: BigNumberish,
			sender: BytesLike,
			token_mint: BytesLike,
			arbiter_fee: BigNumberish,
			overrides?: PayableOverrides & { from?: string | Promise<string> },
		): Promise<BigNumber>;

		receiveEncodedMsg(
			encodedMsg: BytesLike,
			overrides?: Overrides & { from?: string | Promise<string> },
		): Promise<BigNumber>;

		registerApplicationContracts(
			chainId: BigNumberish,
			applicationAddr: BytesLike,
			overrides?: Overrides & { from?: string | Promise<string> },
		): Promise<BigNumber>;

		sendMsg(str: BytesLike, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

		wormhole(overrides?: CallOverrides): Promise<BigNumber>;

		wormhole_fee(overrides?: CallOverrides): Promise<BigNumber>;
	};

	populateTransaction: {
		CANCEL_SOL(overrides?: CallOverrides): Promise<PopulatedTransaction>;

		CANCEL_TOKEN(overrides?: CallOverrides): Promise<PopulatedTransaction>;

		CHAIN_ID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

		CONSISTENCY_LEVEL(overrides?: CallOverrides): Promise<PopulatedTransaction>;

		DEPOSIT_SOL(overrides?: CallOverrides): Promise<PopulatedTransaction>;

		DEPOSIT_TOKEN(overrides?: CallOverrides): Promise<PopulatedTransaction>;

		INSTANT_SOL(overrides?: CallOverrides): Promise<PopulatedTransaction>;

		INSTANT_TOKEN(overrides?: CallOverrides): Promise<PopulatedTransaction>;

		PAUSE_SOL(overrides?: CallOverrides): Promise<PopulatedTransaction>;

		PAUSE_TOKEN(overrides?: CallOverrides): Promise<PopulatedTransaction>;

		SOL_STREAM(overrides?: CallOverrides): Promise<PopulatedTransaction>;

		SOL_STREAM_UPDATE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

		SOL_WITHDRAW_STREAM(overrides?: CallOverrides): Promise<PopulatedTransaction>;

		TOKEN_STREAM(overrides?: CallOverrides): Promise<PopulatedTransaction>;

		TOKEN_STREAM_UPDATE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

		TOKEN_WITHDRAW_STREAM(overrides?: CallOverrides): Promise<PopulatedTransaction>;

		WETH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

		WITHDRAW_SOL(overrides?: CallOverrides): Promise<PopulatedTransaction>;

		WITHDRAW_TOKEN(overrides?: CallOverrides): Promise<PopulatedTransaction>;

		_wormhole_fee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

		encode_native_stream(
			processStream: {
				start_time: BigNumberish;
				end_time: BigNumberish;
				amount: BigNumberish;
				toChain: BigNumberish;
				sender: BytesLike;
				receiver: BytesLike;
				can_cancel: BigNumberish;
				can_update: BigNumberish;
			},
			overrides?: CallOverrides,
		): Promise<PopulatedTransaction>;

		encode_native_stream_update(
			processStream: {
				start_time: BigNumberish;
				end_time: BigNumberish;
				amount: BigNumberish;
				toChain: BigNumberish;
				sender: BytesLike;
				receiver: BytesLike;
			},
			overrides?: CallOverrides,
		): Promise<PopulatedTransaction>;

		encode_native_withdraw_stream(
			processWithdrawStream: { toChain: BigNumberish; withdrawer: BytesLike },
			overrides?: CallOverrides,
		): Promise<PopulatedTransaction>;

		encode_process_cancel_native_stream(
			cancelStream: { toChain: BigNumberish; sender: BytesLike },
			overrides?: CallOverrides,
		): Promise<PopulatedTransaction>;

		encode_process_cancel_token_stream(
			cancelStream: {
				toChain: BigNumberish;
				sender: BytesLike;
				token_mint: BytesLike;
				reciever_address: BytesLike;
				data_account_address: BytesLike;
			},
			overrides?: CallOverrides,
		): Promise<PopulatedTransaction>;

		encode_process_deposit_sol(
			processDeposit: {
				amount: BigNumberish;
				toChain: BigNumberish;
				depositor: BytesLike;
			},
			overrides?: CallOverrides,
		): Promise<PopulatedTransaction>;

		encode_process_deposit_token(
			processDeposit: {
				amount: BigNumberish;
				toChain: BigNumberish;
				depositor: BytesLike;
				token_mint: BytesLike;
			},
			overrides?: CallOverrides,
		): Promise<PopulatedTransaction>;

		encode_process_instant_native_transfer(
			processTransfer: {
				amount: BigNumberish;
				toChain: BigNumberish;
				withdrawer: BytesLike;
				sender: BytesLike;
			},
			overrides?: CallOverrides,
		): Promise<PopulatedTransaction>;

		encode_process_instant_token_transfer(
			processTransfer: {
				amount: BigNumberish;
				toChain: BigNumberish;
				withdrawer: BytesLike;
				token_mint: BytesLike;
				sender: BytesLike;
			},
			overrides?: CallOverrides,
		): Promise<PopulatedTransaction>;

		encode_process_native_withdrawal(
			processWithdraw: {
				amount: BigNumberish;
				toChain: BigNumberish;
				withdrawer: BytesLike;
			},
			overrides?: CallOverrides,
		): Promise<PopulatedTransaction>;

		encode_process_pause_native_stream(
			pauseStream: { toChain: BigNumberish; sender: BytesLike },
			overrides?: CallOverrides,
		): Promise<PopulatedTransaction>;

		encode_process_pause_token_stream(
			pauseStream: {
				toChain: BigNumberish;
				sender: BytesLike;
				token_mint: BytesLike;
				reciever_address: BytesLike;
				data_account_address: BytesLike;
			},
			overrides?: CallOverrides,
		): Promise<PopulatedTransaction>;

		encode_process_token_withdrawal(
			processWithdraw: {
				amount: BigNumberish;
				toChain: BigNumberish;
				withdrawer: BytesLike;
				token_mint: BytesLike;
			},
			overrides?: CallOverrides,
		): Promise<PopulatedTransaction>;

		encode_token_stream(
			processStream: {
				start_time: BigNumberish;
				end_time: BigNumberish;
				amount: BigNumberish;
				toChain: BigNumberish;
				sender: BytesLike;
				receiver: BytesLike;
				can_cancel: BigNumberish;
				can_update: BigNumberish;
				token_mint: BytesLike;
			},
			overrides?: CallOverrides,
		): Promise<PopulatedTransaction>;

		encode_token_stream_update(
			processStream: {
				start_time: BigNumberish;
				end_time: BigNumberish;
				amount: BigNumberish;
				toChain: BigNumberish;
				sender: BytesLike;
				receiver: BytesLike;
				token_mint: BytesLike;
				data_account_address: BytesLike;
			},
			overrides?: CallOverrides,
		): Promise<PopulatedTransaction>;

		encode_token_withdraw_stream(
			processWithdrawStream: {
				toChain: BigNumberish;
				withdrawer: BytesLike;
				token_mint: BytesLike;
				sender_address: BytesLike;
				data_account_address: BytesLike;
			},
			overrides?: CallOverrides,
		): Promise<PopulatedTransaction>;

		getCurrentMsg(overrides?: CallOverrides): Promise<PopulatedTransaction>;

		process_cancel_native_stream(
			sender: BytesLike,
			arbiter_fee: BigNumberish,
			overrides?: PayableOverrides & { from?: string | Promise<string> },
		): Promise<PopulatedTransaction>;

		process_cancel_token_stream(
			sender: BytesLike,
			token_mint: BytesLike,
			reciever_address: BytesLike,
			data_account_address: BytesLike,
			arbiter_fee: BigNumberish,
			overrides?: PayableOverrides & { from?: string | Promise<string> },
		): Promise<PopulatedTransaction>;

		process_deposit_sol(
			amount: BigNumberish,
			depositor: BytesLike,
			arbiter_fee: BigNumberish,
			overrides?: PayableOverrides & { from?: string | Promise<string> },
		): Promise<PopulatedTransaction>;

		process_deposit_token(
			amount: BigNumberish,
			depositor: BytesLike,
			token_mint: BytesLike,
			arbiter_fee: BigNumberish,
			overrides?: PayableOverrides & { from?: string | Promise<string> },
		): Promise<PopulatedTransaction>;

		process_instant_native_transfer(
			amount: BigNumberish,
			sender: BytesLike,
			withdrawer: BytesLike,
			arbiter_fee: BigNumberish,
			overrides?: PayableOverrides & { from?: string | Promise<string> },
		): Promise<PopulatedTransaction>;

		process_instant_token_transfer(
			amount: BigNumberish,
			sender: BytesLike,
			withdrawer: BytesLike,
			token_mint: BytesLike,
			arbiter_fee: BigNumberish,
			overrides?: PayableOverrides & { from?: string | Promise<string> },
		): Promise<PopulatedTransaction>;

		process_native_stream(
			start_time: BigNumberish,
			end_time: BigNumberish,
			amount: BigNumberish,
			receiver: BytesLike,
			sender: BytesLike,
			can_cancel: BigNumberish,
			can_update: BigNumberish,
			arbiter_fee: BigNumberish,
			overrides?: PayableOverrides & { from?: string | Promise<string> },
		): Promise<PopulatedTransaction>;

		process_native_stream_update(
			start_time: BigNumberish,
			end_time: BigNumberish,
			amount: BigNumberish,
			receiver: BytesLike,
			sender: BytesLike,
			arbiter_fee: BigNumberish,
			overrides?: PayableOverrides & { from?: string | Promise<string> },
		): Promise<PopulatedTransaction>;

		process_native_withdraw_stream(
			withdrawer: BytesLike,
			arbiter_fee: BigNumberish,
			overrides?: PayableOverrides & { from?: string | Promise<string> },
		): Promise<PopulatedTransaction>;

		process_native_withdrawal(
			amount: BigNumberish,
			sender: BytesLike,
			arbiter_fee: BigNumberish,
			overrides?: PayableOverrides & { from?: string | Promise<string> },
		): Promise<PopulatedTransaction>;

		process_pause_native_stream(
			sender: BytesLike,
			arbiter_fee: BigNumberish,
			overrides?: PayableOverrides & { from?: string | Promise<string> },
		): Promise<PopulatedTransaction>;

		process_pause_token_stream(
			sender: BytesLike,
			token_mint: BytesLike,
			reciever_address: BytesLike,
			data_account_address: BytesLike,
			arbiter_fee: BigNumberish,
			overrides?: PayableOverrides & { from?: string | Promise<string> },
		): Promise<PopulatedTransaction>;

		process_token_stream(
			start_time: BigNumberish,
			end_time: BigNumberish,
			amount: BigNumberish,
			receiver: BytesLike,
			sender: BytesLike,
			can_cancel: BigNumberish,
			can_update: BigNumberish,
			token_mint: BytesLike,
			arbiter_fee: BigNumberish,
			overrides?: PayableOverrides & { from?: string | Promise<string> },
		): Promise<PopulatedTransaction>;

		process_token_stream_update(
			start_time: BigNumberish,
			end_time: BigNumberish,
			amount: BigNumberish,
			receiver: BytesLike,
			sender: BytesLike,
			token_mint: BytesLike,
			data_account_address: BytesLike,
			arbiter_fee: BigNumberish,
			overrides?: PayableOverrides & { from?: string | Promise<string> },
		): Promise<PopulatedTransaction>;

		process_token_withdraw_stream(
			withdrawer: BytesLike,
			token_mint: BytesLike,
			sender_address: BytesLike,
			data_account_address: BytesLike,
			arbiter_fee: BigNumberish,
			overrides?: PayableOverrides & { from?: string | Promise<string> },
		): Promise<PopulatedTransaction>;

		process_token_withdrawal(
			amount: BigNumberish,
			sender: BytesLike,
			token_mint: BytesLike,
			arbiter_fee: BigNumberish,
			overrides?: PayableOverrides & { from?: string | Promise<string> },
		): Promise<PopulatedTransaction>;

		receiveEncodedMsg(
			encodedMsg: BytesLike,
			overrides?: Overrides & { from?: string | Promise<string> },
		): Promise<PopulatedTransaction>;

		registerApplicationContracts(
			chainId: BigNumberish,
			applicationAddr: BytesLike,
			overrides?: Overrides & { from?: string | Promise<string> },
		): Promise<PopulatedTransaction>;

		sendMsg(str: BytesLike, overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

		wormhole(overrides?: CallOverrides): Promise<PopulatedTransaction>;

		wormhole_fee(overrides?: CallOverrides): Promise<PopulatedTransaction>;
	};
}
